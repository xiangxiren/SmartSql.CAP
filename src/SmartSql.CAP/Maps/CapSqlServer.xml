<?xml version="1.0" encoding="utf-8" ?>

<SmartSqlMap Scope="Cap" xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">

  <Statements>

    <Statement Id="InitializeTables" SourceChoice="Write">
      IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '<Placeholder Property="schema" />')
      BEGIN
      EXEC('CREATE SCHEMA [<Placeholder Property="schema" />]')
      END;

      IF OBJECT_ID(N'<Placeholder Property="receivedTableName" />',N'U') IS NULL
      BEGIN
      CREATE TABLE [<Placeholder Property="schema" />].[Received](
      [Id] [bigint] NOT NULL,
      [Version] [nvarchar](20) NOT NULL,
      [Name] [nvarchar](200) NOT NULL,
      [Group] [nvarchar](200) NULL,
      [Content] [nvarchar](max) NULL,
      [Retries] [int] NOT NULL,
      [Added] [datetime2](7) NOT NULL,
      [ExpiresAt] [datetime2](7) NULL,
      [StatusName] [nvarchar](50) NOT NULL,
      CONSTRAINT [PK_<Placeholder Property="schema" />.Received] PRIMARY KEY CLUSTERED
      (
      [Id] ASC
      )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
      ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
      END;

      IF OBJECT_ID(N'<Placeholder Property="publishedTableName" />',N'U') IS NULL
      BEGIN
      CREATE TABLE [<Placeholder Property="schema" />].[Published](
      [Id] [bigint] NOT NULL,
      [Version] [nvarchar](20) NOT NULL,
      [Name] [nvarchar](200) NOT NULL,
      [Content] [nvarchar](max) NULL,
      [Retries] [int] NOT NULL,
      [Added] [datetime2](7) NOT NULL,
      [ExpiresAt] [datetime2](7) NULL,
      [StatusName] [nvarchar](50) NOT NULL,
      CONSTRAINT [PK_<Placeholder Property="schema" />.Published] PRIMARY KEY CLUSTERED
      (
      [Id] ASC
      )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
      ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
      END;
    </Statement>

    <Statement Id="GetStatistics">
      SELECT
      (
      SELECT COUNT(Id) FROM <Placeholder Property="PublishedTableName" /> WHERE StatusName = N'Succeeded'
      ) AS PublishedSucceeded,
      (
      SELECT COUNT(Id) FROM <Placeholder Property="ReceivedTableName" /> WHERE StatusName = N'Succeeded'
      ) AS ReceivedSucceeded,
      (
      SELECT COUNT(Id) FROM <Placeholder Property="PublishedTableName" /> WHERE StatusName = N'Failed'
      ) AS PublishedFailed,
      (
      SELECT COUNT(Id) FROM <Placeholder Property="ReceivedTableName" /> WHERE StatusName = N'Failed'
      ) AS ReceivedFailed
    </Statement>

    <Statement Id="GetTimelineStats">
      WITH aggr as (
      SELECT FORMAT(Added,'yyyy-MM-dd-HH') AS [Key],
      COUNT(Id) AS [Count]
      FROM  <Placeholder Property="TableName" />
      WHERE StatusName = @statusName
      GROUP BY FORMAT(Added,'yyyy-MM-dd-HH')
      )
      SELECT [Key], [Count] FROM aggr WITH (NOLOCK) WHERE [Key] >= @minKey AND [Key] &lt;= @maxKey
    </Statement>

    <Statement Id="QueryParams">
      <Where>
        <IsNotEmpty Prepend="And" Property="StatusName">
          StatusName = @statusName
        </IsNotEmpty>
        <IsNotEmpty Prepend="And" Property="Name">
          Name = @name
        </IsNotEmpty>
        <IsNotEmpty Prepend="And" Property="Group">
          Group = @group
        </IsNotEmpty>
        <IsNotEmpty Prepend="And" Property="Content">
          Content LIKE '%' + @content + '%'
        </IsNotEmpty>
      </Where>
    </Statement>

    <Statement Id="QueryMessages" >
      SELECT * From <Placeholder Property="TableName" />
      <Include RefId="QueryParams" />
      ORDER BY Added DESC
      OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY
    </Statement>

    <!--获取记录数-->
    <Statement Id="GetRecord">
      Select Count(1) From <Placeholder Property="TableName" />
      <Include RefId="QueryParams" />
    </Statement>

    <Statement Id="GetNumberOfMessage">
      SELECT COUNT(Id) FROM <Placeholder Property="TableName" />
      WHERE StatusName = @statusName
    </Statement>

    <Statement Id="GetMessage">
      SELECT Id AS DbId, Content, Added, ExpiresAt, Retries
      FROM <Placeholder Property="TableName" />
      WHERE Id = @id
    </Statement>

    <Statement Id="ChangeMessageState">
      UPDATE <Placeholder Property="TableName" />
      SET Retries=@retries, ExpiresAt=@expiresAt, StatusName=@statusName, Content=@content
      WHERE Id = @id
    </Statement>

    <Statement Id="InsertPublishedMessage">
      INSERT INTO <Placeholder Property="TableName" />
      (
      [Id],
      [Version],
      [Name],
      [Content],
      [Retries],
      [Added],
      [ExpiresAt],
      [StatusName]
      )
      VALUES
      (
      @id,
      @version,
      @name,
      @content,
      @retries,
      @added,
      @expiresAt,
      @statusName
      )
    </Statement>

    <Statement Id="InsertReceivedMessage">
      INSERT INTO <Placeholder Property="TableName" />
      (
      [Id],
      [Version],
      [Name],
      [Group],
      [Content],
      [Retries],
      [Added],
      [ExpiresAt],
      [StatusName]
      )
      VALUES
      (
      @id,
      @version,
      @name,
      @group,
      @content,
      @retries,
      @added,
      @expiresAt,
      @statusName
      )
    </Statement>

    <Statement Id="DeleteExpires">
      DELETE TOP (@batchCount)
      FROM <Placeholder Property="TableName" /> WITH (READPAST)
      WHERE ExpiresAt &lt; @timeout
    </Statement>

    <Statement Id="GetMessagesOfNeedRetry">
      SELECT TOP (200) Id, Content, Retries, Added
      FROM <Placeholder Property="TableName" /> WITH (READPAST)
      WHERE Retries &lt; @retries
      AND Version = @version AND Added &lt; @added
      AND (StatusName = 'Failed' OR StatusName = 'Scheduled')
    </Statement>

  </Statements>

</SmartSqlMap>
<?xml version="1.0" encoding="utf-8" ?>

<SmartSqlMap Scope="Cap" xmlns="http://SmartSql.net/schemas/SmartSqlMap.xsd">

  <Statements>

    <Statement Id="InitializeTables" SourceChoice="Write">
      CREATE TABLE IF NOT EXISTS `<Placeholder Property="receivedTableName" />`
      (
      `Id` bigint NOT NULL,
      `Version` varchar(20) DEFAULT NULL,
      `Name` varchar(400) NOT NULL,
      `Group` varchar(200) DEFAULT NULL,
      `Content` longtext,
      `Retries` int(11) DEFAULT NULL,
      `Added` datetime NOT NULL,
      `ExpiresAt` datetime DEFAULT NULL,
      `StatusName` varchar(50) NOT NULL,
      PRIMARY KEY (`Id`),
      INDEX `IX_ExpiresAt`(`ExpiresAt`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

      CREATE TABLE IF NOT EXISTS `<Placeholder Property="publishedTableName" />`
      (
      `Id` bigint NOT NULL,
      `Version` varchar(20) DEFAULT NULL,
      `Name` varchar(200) NOT NULL,
      `Content` longtext,
      `Retries` int(11) DEFAULT NULL,
      `Added` datetime NOT NULL,
      `ExpiresAt` datetime DEFAULT NULL,
      `StatusName` varchar(40) NOT NULL,
      PRIMARY KEY (`Id`),
      INDEX `IX_ExpiresAt`(`ExpiresAt`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
    </Statement>

    <Statement Id="GetStatistics">
      SELECT
      (
      SELECT COUNT(`Id`) FROM `<Placeholder Property="publishedTableName" />` WHERE `StatusName` = N'Succeeded'
      ) AS PublishedSucceeded,
      (
      SELECT COUNT(`Id`) FROM `<Placeholder Property="receivedTableName" />` WHERE `StatusName` = N'Succeeded'
      ) AS ReceivedSucceeded,
      (
      SELECT COUNT(`Id`) FROM `<Placeholder Property="publishedTableName" />` WHERE `StatusName` = N'Failed'
      ) AS PublishedFailed,
      (
      SELECT COUNT(`Id`) FROM `<Placeholder Property="receivedTableName" />` WHERE `StatusName` = N'Failed'
      ) AS ReceivedFailed,
      (
      SELECT COUNT(`Id`) FROM `<Placeholder Property="publishedTableName" />` WHERE StatusName = N'Delayed'
      ) AS PublishedDelayed
    </Statement>

    <Statement Id="GetTimelineStats">
      SELECT aggr.*
      FROM (
      SELECT date_format(`Added`, '%Y-%m-%d-%H') AS `Key`,
      count(id) AS `Count`
      FROM `<Placeholder Property="tableName" />`
      WHERE StatusName = ?statusName
      GROUP BY date_format(`Added`, '%Y-%m-%d-%H')
      ) aggr
      WHERE `Key` >= ?minKey
      AND `Key` &lt;= ?maxKey
    </Statement>

    <Statement Id="QueryParams">
      <Where>
        <IsNotEmpty Prepend="And" Property="statusName">
          `StatusName` = ?statusName
        </IsNotEmpty>
        <IsNotEmpty Prepend="And" Property="name">
          `Name` = ?name
        </IsNotEmpty>
        <IsNotEmpty Prepend="And" Property="group">
          `Group` = ?group
        </IsNotEmpty>
        <IsNotEmpty Prepend="And" Property="content">
          `Content` LIKE CONCAT('%',?content,'%')
        </IsNotEmpty>
      </Where>
    </Statement>

    <Statement Id="QueryMessages" >
      SELECT * FROM `<Placeholder Property="tableName" />`
      <Include RefId="QueryParams" />
      ORDER BY Added DESC
      LIMIT ?limit OFFSET ?offset
    </Statement>

    <!--获取记录数-->
    <Statement Id="GetRecord">
      SELECT COUNT(1) FROM `<Placeholder Property="tableName" />`
      <Include RefId="QueryParams" />
    </Statement>

    <Statement Id="GetNumberOfMessage">
      SELECT COUNT(`Id`) FROM `<Placeholder Property="tableName" />`
      WHERE `StatusName` = ?statusName
    </Statement>

    <Statement Id="GetMessage">
      SELECT `Id` as DbId, `Content`,`Added`,`ExpiresAt`,`Retries`
      FROM `<Placeholder Property="tableName" />`
      WHERE `Id` = ?id
    </Statement>

    <Statement Id="ChangePublishStateToDelayed">
      UPDATE `<Placeholder Property="tableName" />`
      SET `StatusName`=?statusName
      WHERE `Id` IN ?ids
    </Statement>

    <Statement Id="ChangeMessageState">
      UPDATE `<Placeholder Property="tableName" />`
      SET `Retries`=?retries, `ExpiresAt`=?expiresAt, `StatusName`=?statusName, `Content`=?content
      WHERE `Id` = ?id
    </Statement>

    <Statement Id="InsertPublishedMessage">
      INSERT INTO `<Placeholder Property="tableName" />`
      (
      `Id`,
      `Version`,
      `Name`,
      `Content`,
      `Retries`,
      `Added`,
      `ExpiresAt`,
      `StatusName`
      )
      VALUES
      (
      ?id,
      ?version,
      ?name,
      ?content,
      ?retries,
      ?added,
      ?expiresAt,
      ?statusName
      )
    </Statement>

    <Statement Id="InsertReceivedMessage">
      INSERT INTO `<Placeholder Property="tableName" />`
      (
      `Id`,
      `Version`,
      `Name`,
      `Group`,
      `Content`,
      `Retries`,
      `Added`,
      `ExpiresAt`,
      `StatusName`
      )
      VALUES
      (
      ?id,
      ?version,
      ?name,
      ?group,
      ?content,
      ?retries,
      ?added,
      ?expiresAt,
      ?statusName
      )
    </Statement>

    <Statement Id="DeleteExpires">
      DELETE FROM `<Placeholder Property="tableName" />`
      WHERE ExpiresAt &lt; ?timeout
      LIMIT ?batchCount
    </Statement>

    <Statement Id="GetMessagesOfNeedRetry">
      SELECT `Id`, `Content`, `Retries`, `Added`
      FROM `<Placeholder Property="tableName" />`
      WHERE `Retries` &lt; ?retries
      AND `Version` = ?version
      AND `Added` &lt; ?added
      AND (`StatusName` = 'Failed' OR `StatusName` = 'Scheduled')
      LIMIT 200
    </Statement>

    <Statement Id="GetMessagesOfDelayed">
      SELECT `Id`,`Content`,`Retries`,`Added`,`ExpiresAt`
      FROM `<Placeholder Property="tableName" />`
      WHERE `Version` = ?version
      AND ((`ExpiresAt` &lt; ?twoMinutesLater AND `StatusName` = 'Delayed') OR (`ExpiresAt` &lt; ?oneMinutesAgo AND `StatusName` = 'Queued'))
      FOR UPDATE SKIP LOCKED
    </Statement>

  </Statements>

</SmartSqlMap>